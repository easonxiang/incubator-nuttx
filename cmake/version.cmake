############################################################################
# cmake/version.cmake
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

set(verfile ${PROJECT_BINARY_DIR}/version.h)
if(EXISTS ${verfile})
  return()
endif()

execute_process(
  COMMAND git -C ${NUTTX_DIR} rev-list --tags --max-count=1
  WORKING_DIRECTORY ${NUTTX_DIR}
  OUTPUT_VARIABLE revision
  RESULT_VARIABLE ret
)
if(NOT "${ret}" STREQUAL "0")
  message(FATAL_ERROR "command failed with return code: ${ret}")
endif()

string(STRIP ${revision} revision)

execute_process(
  COMMAND git -C ${NUTTX_DIR} describe --tags ${revision}
  WORKING_DIRECTORY ${NUTTX_DIR}
  OUTPUT_VARIABLE version
  RESULT_VARIABLE ret
)
if(NOT "${ret}" STREQUAL "0")
  message(FATAL_ERROR "command failed with return code: ${ret}")
endif()

string(STRIP ${version} version)

message(STATUS "version: " ${version})

execute_process(
  COMMAND git -C ${NUTTX_DIR} log --oneline -1
  WORKING_DIRECTORY ${NUTTX_DIR}
  OUTPUT_VARIABLE output
  RESULT_VARIABLE ret
)
if(NOT "${ret}" STREQUAL "0")
  message(FATAL_ERROR "command failed with return code: ${ret}")
endif()

string(SUBSTRING ${output} 0 10 build)

message(STATUS "build: " ${build})

string(REGEX REPLACE
		"nuttx-([0-9]+).([0-9]+).([0-9]+)"
		"\\1;\\2;\\3"
		RESULT
		${version})

list(GET RESULT 0 major)
list(GET RESULT 1 minor)
list(GET RESULT 2 patch)
message(STATUS "major: " ${major})
message(STATUS "minor: " ${minor})
message(STATUS "patch: " ${patch})

file(WRITE ${verfile} "/* version.h -- Autogenerated! Do not edit. */\n\n")

file(APPEND ${verfile} "#ifndef __INCLUDE_NUTTX_VERSION_H\n")
file(APPEND ${verfile} "#define __INCLUDE_NUTTX_VERSION_H\n\n")

file(APPEND ${verfile} "#define CONFIG_VERSION_STRING \"${version}\"\n")
file(APPEND ${verfile} "#define CONFIG_VERSION_MAJOR ${major}\n")
file(APPEND ${verfile} "#define CONFIG_VERSION_MINOR ${minor}\n")
file(APPEND ${verfile} "#define CONFIG_VERSION_PATCH ${patch}\n")
file(APPEND ${verfile} "#define CONFIG_VERSION_BUILD \"${build}\"\n\n")

file(APPEND ${verfile} "#define CONFIG_VERSION ((CONFIG_VERSION_MAJOR << 16) | \\
                        (CONFIG_VERSION_MINOR << 8)  | \\
                        (CONFIG_VERSION_PATCH))\n")

file(APPEND ${verfile} "\n#endif /* __INCLUDE_NUTTX_VERSION_H */\n")

